{"version":3,"sources":["api/Api.ts","components/User/User.tsx","components/Comment/Comment.tsx","components/CommentList/CommentList.tsx","components/Post/Post.tsx","components/PostList/PostList.tsx","index.tsx","App.tsx"],"names":["getData","keyWord","a","url","fetch","response","json","data","getCompletePosts","Promise","all","posts","users","comments","completePosts","map","post","user","find","item","id","userId","filter","postId","User","name","email","address","street","city","suite","Comment","comment","body","className","CommentList","key","Post","title","PostList","allPosts","ReactDOM","render","useState","setAllPosts","isLoading","setIsLoading","query","setQuery","filterQuery","setFilterQuery","loadPosts","postFromServer","setFilterQueryWithDebounce","useCallback","debounce","postsToShow","useMemo","length","toLowerCase","includes","type","value","onChange","event","target","placeholder","onClick","disabled","document","getElementById"],"mappings":"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","file":"static/js/main.e73f47fe.chunk.js","sourcesContent":["const BASE_URL = 'https://jsonplaceholder.typicode.com/';\n\nconst getData = async <T>(keyWord: string): Promise<T> => {\n  const url = BASE_URL + keyWord;\n\n  const response = await fetch(url);\n  const data = await response.json();\n\n  return data;\n};\n\nconst getPosts = () => {\n  return getData<PostInterface[]>('posts');\n};\n\nconst getUsers = () => {\n  return getData<UserInterface[]>('users');\n};\n\nconst getComments = () => {\n  return getData<CommentInterface[]>('comments');\n};\n\nexport const getCompletePosts = async () => {\n  const [posts, users, comments] = await Promise.all([getPosts(), getUsers(), getComments()]);\n\n  const completePosts = posts.map(post => ({\n    ...post,\n    user: users.find(item => item.id === post.userId),\n    comments: comments.filter(item => item.postId === post.id),\n  })) as PostInterface[];\n\n  return completePosts;\n};\n","import React, { FC } from 'react';\nimport './User.css';\n\ninterface Props {\n  user: UserInterface;\n}\n\nexport const User: FC<Props> = ({ user }) => {\n  const { name, email, address } = user;\n  const { street, city, suite } = address;\n\n  return (\n    <span>\n      {`User: ${name},\n      Email: ${email},\n      Address: city ${city}\n      str.${street} ${suite}`}\n    </span>\n  );\n};\n","import React, { FC } from 'react';\nimport './Comment.css';\n\ninterface Props {\n  comment: CommentInterface;\n}\n\nexport const Comment: FC<Props> = ({ comment }) => {\n  const { name, email, body } = comment;\n\n  return (\n    <>\n      <p>\n        <span className=\"name\">\n          {name}\n        </span>\n        {` email:${email}`}\n      </p>\n      <p>\n        {body}\n      </p>\n    </>\n  );\n};\n","import React, { FC } from 'react';\nimport './CommentList.css';\nimport { Comment } from '../Comment/Comment';\n\ninterface Props {\n  comments: CommentInterface[];\n}\n\nexport const CommentList: FC<Props> = ({ comments }) => {\n  return (\n    <ul>\n      {comments.map(comment => (\n        <Comment key={comment.id} comment={comment} />\n      ))}\n    </ul>\n  );\n};\n","import React, { FC } from 'react';\nimport './Post.css';\nimport { User } from '../User/User';\nimport { CommentList } from '../CommentList/CommentList';\n\ninterface Props {\n  post: PostInterface;\n}\n\nexport const Post: FC<Props> = ({ post }) => {\n  const {\n    title,\n    body,\n    user,\n    comments,\n  } = post;\n\n  return (\n    <>\n      <ul className=\"post\">\n        <li>\n          <h3>\n            {title}\n          </h3>\n        </li>\n        <li>\n          {body}\n        </li>\n        <li>\n          <User user={user} />\n        </li>\n        <li className=\"comments\">\n          <p>Comments:</p>\n          <CommentList key={post.id} comments={comments} />\n        </li>\n      </ul>\n    </>\n  );\n};\n","import React, { FC } from 'react';\nimport './PostList.css';\nimport { Post } from '../Post/Post';\n\ninterface Props {\n  allPosts: PostInterface[];\n}\n\nexport const PostList: FC<Props> = ({ allPosts }) => {\n  return (\n    <div className=\"post-list\">\n      {allPosts.map(post => (\n        <Post key={post.id} post={post} />\n      ))}\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n","/* eslint-disable object-curly-newline */\nimport React, { FC, useState, ChangeEvent, useMemo, useCallback } from 'react';\nimport debounce from 'lodash.debounce';\n\nimport './App.css';\nimport { getCompletePosts } from './api/Api';\nimport { PostList } from './components/PostList/PostList';\n\n\nexport const App: FC = () => {\n  const [allPosts, setAllPosts] = useState<PostInterface[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [query, setQuery] = useState('');\n  const [filterQuery, setFilterQuery] = useState('');\n\n\n  const loadPosts = async () => {\n    setIsLoading(true);\n    const postFromServer = await getCompletePosts();\n\n    setAllPosts(postFromServer);\n  };\n\n  const setFilterQueryWithDebounce = useCallback(\n    debounce(setFilterQuery, 1000),\n    [],\n  );\n\n  const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value);\n    setFilterQueryWithDebounce(event.target.value);\n  };\n\n  const postsToShow = useMemo(() => {\n    if (!allPosts.length) {\n      return [];\n    }\n\n    return allPosts\n      .filter(post => post.body.toLowerCase().includes(filterQuery.toLowerCase())\n      || post.title.toLowerCase().includes(filterQuery.toLowerCase()));\n  }, [filterQuery, allPosts]);\n\n  return (\n    <div className=\"App\">\n      <h1>Dynamic list of posts</h1>\n\n      {!allPosts.length\n        ? (\n          <button type=\"button\" onClick={loadPosts} disabled={isLoading}>\n            {isLoading ? 'Loading...' : 'Load Posts'}\n          </button>\n        ) : (\n          <>\n            <input\n              type=\"text\"\n              value={query}\n              onChange={handleChange}\n              placeholder=\"Input text\"\n            />\n            <PostList allPosts={postsToShow} />\n          </>\n        )}\n    </div>\n  );\n};\n"],"sourceRoot":""}